#!/bin/bash

set -o nounset
set -o errexit

readonly IMAGE_SIZE="300x300"
readonly COLOR_BG_BLACK="\033[40;1m"
readonly COLOR_FG_BLACK="\033[30m"
readonly COLOR_FG_WHITE="\033[37m"
readonly COLOR_FG_HIGHLIGHT="\033[34;1m"
readonly COLOR_NONE="\033[m"
readonly COLOR_FG_CYAN="\033[36m"
readonly INDICATOR="âž¤"

readonly JSON_KEYS=(
    "company"
    "blog"
    "location"
    "email"
    "twitter_username"
    "public_repos"
    "public_gists"
    "followers"
    "following"
    "created_at"
    "updated_at"
)

function _get_user_info() {
    local username="$1"
    gh api "users/$username"
}

function _get_avatar_url() {
    local username="$1"
    local avatar_url
    avatar_url="$(_get_user_info "$username" | jq -r .avatar_url)"
    echo "$avatar_url"
}

function _print_info() {
    local username="${1:-}"
    local userinfo

    if [ -z "${username}" ]; then
        # If username is not provided, get the logged-in user info
        userinfo="$(gh api user)"
    else
        # If username is provided, get the specified user info
        userinfo="$(_get_user_info "$username")"
    fi

    if [ -n "${username}" ]; then
        # If username is provided, try to get and display the profile picture
        local avatar_url
        avatar_url="$(_get_avatar_url "$username")"

        if [ "$avatar_url" != "null" ]; then
            # Download the image
            local temp_image="/tmp/github_avatar.jpg"
            curl -s -o "$temp_image" "$avatar_url"

            # Resize the image to a smaller size
            magick "$temp_image" -resize ${IMAGE_SIZE} "$temp_image"

            # Display the resized image in Kitty terminal on the left
            kitty +kitten icat --align left "$temp_image"

            # Remove the temporary image file
            rm "$temp_image"
        else
            echo "User not found or has no profile picture."
        fi
    fi

    # Print the user's name inside a black box with cyan foreground  
    echo -e "${COLOR_BG_BLACK}${COLOR_FG_HIGHLIGHT}${COLOR_FG_CYAN}${COLOR_BG_BLACK}${COLOR_BG_BLACK}Name${COLOR_BG_BLACK}${INDICATOR} ${COLOR_FG_WHITE}$(_get_value "name" <<<"${userinfo:-}")${COLOR_NONE}"
    echo -e "${COLOR_BG_BLACK}${COLOR_FG_HIGHLIGHT}${COLOR_FG_CYAN}${COLOR_BG_BLACK}${COLOR_BG_BLACK}Username${COLOR_BG_BLACK}${INDICATOR} ${COLOR_FG_WHITE}$(_get_value "login" <<<"${userinfo:-}")${COLOR_NONE}"

    _print_bar

    for k in "${JSON_KEYS[@]}"; do
        local value
        value="$(_get_value "${k}" <<<"$userinfo")"
        
        # Check if the value is empty and print 'null' instead
        [ -z "${value}" ] && value="null"

        printf "%s${COLOR_FG_HIGHLIGHT}${k}${COLOR_NONE}${INDICATOR} ${value}\n" ""
    done

    _print_bar
}

function _get_value() {
    jq -r ".${1}" </dev/stdin
}

function _print_bar() {
    echo -e "${COLOR_FG_BLACK}=================================================${COLOR_NONE}"
}

# Check if GitHub CLI (gh) is installed
if ! command -v gh &> /dev/null; then
    echo "GitHub CLI (gh) not found. Please install GitHub CLI and try again."
    exit 1
fi

# Check if a username is provided as a command-line argument
if [ $# -eq 1 ]; then
    _print_info "$1"
else
    _print_info
fi
